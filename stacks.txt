A stack is a linear data structure in which the insertion of a new element and removal of an existing element takes place at the same end represented as the top of the stack.
This strategy states that the element that is inserted last will come out first. You can take a pile of plates kept on top of each other as a real-life example. The plate which we put last is on the top and since we remove the plate that is at the top, we can say that the plate that was put last comes out first.
Basic Operations on Stack

In order to make manipulations in a stack, there are certain operations provided to us.

    push() to insert an element into the stack
    pop() to remove an element from the stack
    top() Returns the top element of the stack.
    isEmpty() returns true if stack is empty else false.
    size() returns the size of stack.
Algorithms:
Push:
    begin
    if stack is full
        return
    endif
    else  
    increment top
    stack[top] assign value
    end else
    end procedure
Pop:
    begin
    if stack is empty
        return
    endif
    else
    store value of stack[top]
    decrement top
    return value
    end else
    end procedure
Top:
    begin 
    return stack[top]
    end procedure
isEmpty:
    begin
    if top < 1
        return true
    else
        return false
    end procedure

